{"version":3,"sources":["components/essence/controls/hover-button/HoverButton.module.scss","components/scaffolding/navbar/navbar-indicator/NavbarIndicator.slice.ts","components/scaffolding/skeleton/Skeleton.slice.ts","@intrinsic/store.ts","serviceWorker.ts","components/essence/controls/hover-button/HoverButton.tsx","components/essence/displays/message/Message.tsx","components/essence/displays/logo/Logo.tsx","components/scaffolding/navbar/navbar-indicator/NavbarIndicator.tsx","components/scaffolding/navbar/Navbar.tsx","components/scaffolding/player/Player.tsx","components/scaffolding/skeleton/Skeleton.tsx","index.tsx","components/scaffolding/navbar/Navbar.module.scss","@utils/useStyles.ts","components/scaffolding/player/Player.slice.ts","components/scaffolding/player/Player.module.scss","@utils/useClean.ts","components/essence/displays/message/Message.module.scss","components/scaffolding/skeleton/Skeleton.module.scss","components/essence/wrappers/link-mask/LinkMask.tsx","@utils/useRelativeToComponent.ts","components/scaffolding/navbar/navbar-indicator/NavbarIndicator.module.scss","components/essence/wrappers/link-mask/LinkMask.module.scss"],"names":["module","exports","navbarIndicatorSlice","createSlice","name","initialState","isLoading","reducers","setIsLoading","state","payload","skeletonSlice","data","commands","updateCommands","store","configureStore","reducer","navbarIndicator","player","playerSlice","skeleton","Boolean","window","location","hostname","match","withRouter","props","hoverButtonRef","useRef","styles","useStyles","hoverButton","cursor","appearance","crosshaired","backgroundColor","inverted","hoverButtonText","fontSize","textDecoration","underlined","letterSpacing","marginRight","color","hoverButtonTitle","filter","hoverButtonClickLeft","transform","hoverButtonClickRight","handleClick","useCallback","set","__id","__tOffset","__middleware","to","history","push","isSafe","useRelativeToComponent","ref","orientation","width","height","options","scalar","handle","result","letterspacing","useEffect","clear","className","scss","style","get","onClick","text","title","Message","id","particlesConfig","content","Logo","display","alignItems","justifyContent","size","border","fontFamily","loadImage","url","image","Image","Promise","resolve","onload","src","renderToCanvas","canvas","Component","a","ctx","getContext","svg","renderToStaticMarkup","encodeURIComponent","drawImage","connector","connect","clean","useClean","navbarIndicatorRef","handleLogoAnimation","current","initialWidth","clientWidth","initialHeight","clientHeight","scene","THREE","renderer","alpha","antialias","setSize","setPixelRatio","devicePixelRatio","appendChild","domElement","aspect","camera","position","z","light","add","document","createElement","texture","geometry","material","map","cube","mainLoop","requestAnimationFrame","rotation","x","Math","PI","y","render","remove","fabricateHandleWindowResize","animationControls","currentWidth","currentHeight","updateProjectionMatrix","then","handleWindowResize","addEventListener","removeEventListener","exec","Navbar","navbarChildren","navbarChildConfigs","useMemo","onMouseEnter","onMouseLeave","config","index","LinkMask","instances","dispatch","toggleInstance","ID","actions","setInstanceProgress","progress","reactPlayerRef","useState","currentInstance","setCurrentInstance","isPlaying","setIsPlaying","getCurrentInstance","instance","DATA","closed","seekTo","currentTime","getCurrentTime","playing","muted","URI","Home","React","lazy","Docs","Setup","Contribute","Meta","fetch","res","json","fallback","exact","path","component","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","deepMerge","acc","sources","source","Array","Object","entries","key","value","mapComponentToStyles","stateRef","setState","timeouts","validateNewTimeline","timeoutID","timelineID","split","RegExp","checkIfTimelineExists","input","i","slice","k","setTimeout","length","at","clearTimeout","createInstance","setInstanceURI","dumpster","cleanup","forEach","children","configs","hasBeenExecuted","setHasBeenExecuted","polishOptions","lessThanOrEqualTo","handleComputing","debug"],"mappings":"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","file":"static/js/main.2f4d0295.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hover-button\":\"HoverButton_hover-button__38Kbw\",\"hover-button__text-container\":\"HoverButton_hover-button__text-container__1fZuU\",\"hover-button__text\":\"HoverButton_hover-button__text__ONIh3\",\"hover-button__title-container\":\"HoverButton_hover-button__title-container__12Lis\",\"hover-button__title\":\"HoverButton_hover-button__title__3Zim3\",\"hover-button__click-container\":\"HoverButton_hover-button__click-container__26hcG\",\"hover-button__click__door\":\"HoverButton_hover-button__click__door__2SnS8\"};","/**\r\n * @author lukasdiegelmann\r\n */\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst navbarIndicatorSlice = createSlice({\r\n    name: \"navbarIndicator\",\r\n    initialState: {\r\n        // This will hold the value of the navbarIndicator for wether the page\r\n        // is loading or not. This will be used by the LoadingIndicator\r\n        // component.\r\n        isLoading: false,\r\n    },\r\n    reducers: {\r\n        // This is a simple CaseReducer that sets the state.isLoading property\r\n        // equal to its action payload.\r\n        setIsLoading: (state, { payload }) => {\r\n            // Though this is a mutation it will not be treated as one because\r\n            // of the inherent immer package of redux.\r\n            state.isLoading = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport default navbarIndicatorSlice;\r\n","import {\r\n    createSlice,\r\n    SliceCaseReducers,\r\n    CaseReducer,\r\n    PayloadAction,\r\n} from \"@reduxjs/toolkit\";\r\n\r\ntype InitialState = {\r\n    data: {\r\n        commands: {\r\n            [name: string]: string;\r\n        };\r\n    };\r\n};\r\n\r\ntype CaseReducers = {\r\n    updateCommands: CaseReducer<\r\n        InitialState,\r\n        PayloadAction<InitialState[\"data\"][\"commands\"]>\r\n    >;\r\n} & SliceCaseReducers<InitialState>;\r\n\r\nconst skeletonSlice = createSlice<InitialState, CaseReducers>({\r\n    name: \"skeleton\",\r\n    initialState: {\r\n        data: {\r\n            commands: {},\r\n        },\r\n    },\r\n    reducers: {\r\n        updateCommands: (state, { payload }) => {\r\n            state.data.commands = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport default skeletonSlice;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport navbarIndicatorSlice from \"../components/scaffolding/navbar/navbar-indicator/NavbarIndicator.slice\";\r\nimport playerSlice from \"../components/scaffolding/player/Player.slice\";\r\nimport skeletonSlice from \"../components/scaffolding/skeleton/Skeleton.slice\";\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        navbarIndicator: navbarIndicatorSlice.reducer,\r\n        player: playerSlice.reducer,\r\n        skeleton: skeletonSlice.reducer,\r\n    },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/**\r\n * @author lukasdiegelmann\r\n */\r\n\r\nimport React, { useCallback, useEffect, useRef } from \"react\";\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport useStyles from \"../../../../@utils/useStyles\";\r\nimport useRelativeToComponent from \"../../../../@utils/useRelativeToComponent\";\r\nimport scss from \"./HoverButton.module.scss\";\r\n\r\ntype Props = {\r\n    text: string;\r\n    title: string;\r\n    appearance?: Partial<{\r\n        crosshaired: boolean;\r\n        underlined: boolean;\r\n        letterspacing: boolean;\r\n        inverted: boolean;\r\n    }>;\r\n    to?: string;\r\n} & RouteComponentProps;\r\n\r\nconst HoverButton: React.FunctionComponent<Props> = (props) => {\r\n    const hoverButtonRef = useRef<HTMLDivElement>(null);\r\n\r\n    const styles = useStyles({\r\n        hoverButton: {\r\n            cursor: props.appearance?.crosshaired ? \"crosshair\" : \"default\",\r\n            backgroundColor: props.appearance?.inverted ? \"white\" : \"#141414\",\r\n        },\r\n        hoverButtonText: {\r\n            fontSize: \"0px\",\r\n            textDecoration: `${\r\n                props.appearance?.underlined ? \"underline\" : \"none\"\r\n            }`,\r\n            letterSpacing: \"0px\",\r\n            marginRight: \"0px\",\r\n            color: props.appearance?.inverted ? \"#141414\" : \"white\",\r\n        },\r\n        hoverButtonTitle: {\r\n            filter: \"opacity(0%)\",\r\n            fontSize: \"0px\",\r\n        },\r\n        hoverButtonClickLeft: {\r\n            transform: \"translate3d(calc(-100% - 1px), 0, 0)\",\r\n        },\r\n        hoverButtonClickRight: {\r\n            transform: \"translate3d(calc(100% + 1px), 0, 0)\",\r\n        },\r\n    });\r\n\r\n    const handleClick = useCallback(() => {\r\n        styles.set(\r\n            [\r\n                {\r\n                    __id: \"0:0\",\r\n                    __tOffset: 0,\r\n                    hoverButtonClickLeft: {\r\n                        transform: \"translate3d(-49%, 0, 0)\" as any,\r\n                    },\r\n                    hoverButtonClickRight: {\r\n                        transform: \"translate3d(49%, 0, 0)\" as any,\r\n                    },\r\n                },\r\n                {\r\n                    __id: \"0:1\",\r\n                    __tOffset: 700,\r\n                    hoverButtonTitle: {\r\n                        filter: \"opacity(100%)\" as any,\r\n                    },\r\n                },\r\n                {\r\n                    __id: \"0:2\",\r\n                    __tOffset: 600,\r\n                    __middleware: () => {\r\n                        if (props.to) {\r\n                            props.history.push(props.to);\r\n                        }\r\n                    },\r\n                    hoverButtonTitle: {\r\n                        filter: \"opacity(0%)\",\r\n                    },\r\n                },\r\n                {\r\n                    __id: \"0:3\",\r\n                    __tOffset: 400,\r\n                    hoverButtonClickLeft: {\r\n                        transform: \"translate3d(calc(-100% - 1px), 0, 0)\",\r\n                    },\r\n                    hoverButtonClickRight: {\r\n                        transform: \"translate3d(calc(100% + 1px), 0, 0)\",\r\n                    },\r\n                },\r\n            ],\r\n            { isSafe: true }\r\n        );\r\n    }, [styles, props.history, props.to]);\r\n\r\n    useRelativeToComponent([\r\n        {\r\n            ref: hoverButtonRef,\r\n            orientation: {\r\n                width: 1920,\r\n                height: 1080,\r\n            },\r\n            options: {\r\n                scalar: 80,\r\n            },\r\n            handle: (result) => {\r\n                styles.set({\r\n                    hoverButtonText: {\r\n                        fontSize: `${result}px` as any,\r\n                        letterSpacing: props.appearance?.letterspacing\r\n                            ? `${result * 0.7}px`\r\n                            : (\"0px\" as any),\r\n                        marginRight: `-${result * 0.7}px` as any,\r\n                    },\r\n                });\r\n            },\r\n        },\r\n        {\r\n            ref: hoverButtonRef,\r\n            orientation: {\r\n                width: 1920,\r\n                height: 1080,\r\n            },\r\n            options: {\r\n                scalar: 140,\r\n            },\r\n            handle: (result) => {\r\n                styles.set({\r\n                    hoverButtonTitle: {\r\n                        fontSize: `${result}px` as any,\r\n                    },\r\n                });\r\n            },\r\n        },\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            styles.clear(\"0\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            ref={hoverButtonRef}\r\n            className={scss[\"hover-button\"]}\r\n            style={styles.get().hoverButton}\r\n            onClick={handleClick}\r\n        >\r\n            <div className={scss[\"hover-button__text-container\"]}>\r\n                <b\r\n                    className={scss[\"hover-button__text\"]}\r\n                    style={styles.get().hoverButtonText}\r\n                >\r\n                    {props.text}\r\n                </b>\r\n            </div>\r\n            <div className={scss[\"hover-button__title-container\"]}>\r\n                <b\r\n                    className={scss[\"hover-button__title\"]}\r\n                    style={styles.get().hoverButtonTitle}\r\n                >\r\n                    {props.title}\r\n                </b>\r\n            </div>\r\n            <div className={scss[\"hover-button__click-container\"]}>\r\n                <div\r\n                    className={scss[\"hover-button__click__door\"]}\r\n                    style={styles.get().hoverButtonClickLeft}\r\n                />\r\n                <div\r\n                    className={scss[\"hover-button__click__door\"]}\r\n                    style={styles.get().hoverButtonClickRight}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(HoverButton);\r\n","import React from \"react\";\r\nimport Particles from \"react-tsparticles\";\r\nimport HoverButton from \"../../controls/hover-button/HoverButton\";\r\nimport particlesConfig from \"./particles.config.json\";\r\nimport scss from \"./Message.module.scss\";\r\n\r\ntype Props = {\r\n    content?: {\r\n        text: string;\r\n        title: string;\r\n        to: string;\r\n    };\r\n};\r\n\r\nconst Message: React.FunctionComponent<Props> = (props) => {\r\n    return (\r\n        <div className={scss[\"message\"]}>\r\n            <Particles\r\n                id={scss[\"message__particles\"]}\r\n                options={particlesConfig}\r\n            />\r\n            {props.content ? (\r\n                <div className={scss[\"message__content\"]}>\r\n                    <HoverButton\r\n                        {...props.content}\r\n                        appearance={{ letterspacing: true }}\r\n                    ></HoverButton>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","/**\r\n * @author lukasdiegelmann\r\n */\r\n\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n    // This is the value of the length of the div container. Note that I wrote\r\n    // length, since it is a perfect square (or at least a square since all real\r\n    // numbers are the domain of this component).\r\n    size: number;\r\n};\r\n\r\n// This react function component will pose as the texture and image, or whatever\r\n// type you want it to be, of the website's logo. Though it is quiet simple, it\r\n// was not possible to use relative dimensional values here, since THREE's\r\n// CanvasTexture does not really support that (it resulted in cut-off edges and\r\n// other not pleasently looking cubes).\r\nconst Logo: React.FunctionComponent<Props> = (props) => {\r\n    // The kanji (name of the chinese/japanese script xor signs) always stays\r\n    // the same and is not dependent of the 'props' object.\r\n    //\r\n    // Note: The unicode notation is used here for compatability purposes and\r\n    // the kanji written out is positioned behind it as a comment.\r\n    const title = \"\\u30DC\"; // ボ\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                // The style consists of a simple flexbox system that centers\r\n                // its children. Also, the properties 'width', 'height',\r\n                // 'borderSize' and 'fontSize' are props dependent.\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                height: `${props.size}px`,\r\n                width: `${props.size}px`,\r\n                border: `${props.size / 18}px black solid`,\r\n                backgroundColor: \"white\",\r\n            }}\r\n        >\r\n            <b\r\n                style={{\r\n                    fontSize: `${props.size / 1.8}px`,\r\n                    fontFamily: \"Source Han Serif Heavy\",\r\n                }}\r\n            >\r\n                {title}\r\n            </b>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","/**\r\n * @author lukasdiegelmann\r\n */\r\n\r\nimport React, { useCallback, useEffect, useRef } from \"react\";\r\nimport { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport * as THREE from \"three\";\r\nimport Logo from \"../../../essence/displays/logo/Logo\";\r\nimport useClean from \"../../../../@utils/useClean\";\r\nimport scss from \"./NavbarIndicator.module.scss\";\r\nimport { RootState } from \"../../../../@intrinsic/store\";\r\n\r\nconst loadImage = (url: string): Promise<HTMLImageElement> => {\r\n    // Constructing a new window.Image instance. It is not necessary to tell the\r\n    // browser it's a window.Image object since 'window' is the global object\r\n    // that's put infront of basic class constructors or functions and what not\r\n    // to make could more simple.\r\n    const image = new Image();\r\n\r\n    // Returning a promise since loading an image is an asynchronous task, that\r\n    // is, it is not in sync with the event loop anymore.\r\n    return new Promise((resolve) => {\r\n        // Here a listener is provided that will be executed once the image has\r\n        // finished loading.\r\n        //\r\n        // Once that's happened the promise will be resolved providing any\r\n        // listeners attached with the then() function with the loaded\r\n        // HTMLImageElement.\r\n        image.onload = () => resolve(image);\r\n\r\n        // The source of the image is defined as the url that's been provided as\r\n        // an argument.\r\n        image.src = url;\r\n    });\r\n};\r\n\r\nconst renderToCanvas = async (\r\n    canvas: HTMLCanvasElement,\r\n    Component: React.FunctionComponent\r\n) => {\r\n    // Defining the dimensions of the canvas, this is dependend on the\r\n    // parameters passed to the renderToCanvas() function.\r\n    canvas.width = 200;\r\n    canvas.height = 200;\r\n\r\n    // Getting the canvas's 2d context to draw on.\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    // Templating a url that will allow the loadImage() function to create a\r\n    // proper image based on a react functional component.\r\n    //\r\n    // This is thanks to the <foreignObject /> tag which allows XHTML to be\r\n    // inserted into a svg tag or file, respectively.\r\n    const svg = `\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\">\r\n        <foreignObject width=\"100%\" height=\"100%\">\r\n            <div xmlns=\"http://www.w3.org/1999/xhtml\">${renderToStaticMarkup(\r\n                <Component />\r\n            )}</div>\r\n        </foreignObject>\r\n    </svg>`;\r\n    const url = `data:image/svg+xml;charset=utf8,${encodeURIComponent(svg)}`;\r\n\r\n    // This will generate a window.Image instance based on the url templated\r\n    // above.\r\n    const image = await loadImage(url);\r\n\r\n    // Now that a image has been created out of the url, it is possible to draw\r\n    // the image onto the canvas's context using its inherent drawImage()\r\n    // method.\r\n    ctx?.drawImage(image, 0, 0);\r\n};\r\n\r\n// This is the react functional component that will be rendered to the DOM\r\n// (Document Model Object) by the react api.\r\nconst NavbarIndicator: React.FunctionComponent<\r\n    ConnectedProps<typeof connector>\r\n> = (props) => {\r\n    // For more information see the comments at\r\n    // 'frontend\\src\\utils\\customHooks\\useCleanup.ts'.\r\n    const clean = useClean();\r\n\r\n    // This serves as a reference of the navbarIndicator DOM element. Notice\r\n    // that it can be null, as it is the initial value, so until\r\n    // componentDidMount is called in the component life cycle it be that value.\r\n    const navbarIndicatorRef = useRef<HTMLDivElement>(null);\r\n\r\n    // The handleLogoAnimation() function is used to initiate and handle the\r\n    // logo animation that can be seen at the top of each page of the hanji\r\n    // docs.\r\n    //\r\n    // Note: The handleLogoAnimation function is an asynchonous function because\r\n    // of the loadImage() call a little bit deeper in the call tree. This\r\n    // results in wrapping the function into a new Promise() instantiation.\r\n    const handleLogoAnimation = useCallback(async () => {\r\n        // As mentioned before the navbarIndicatorRef can be null and as the\r\n        // typescript compiler does not inherit AI level knowledge of how\r\n        // reactjs works and what an component life cycle is it sets the\r\n        // reference equal to a union type of null and HTMLDivElement.\r\n        if (navbarIndicatorRef.current) {\r\n            // This gets the dimensions at point of initialization. Those are\r\n            // used to set the first aspect ratio of the camera.\r\n            //\r\n            // Note: The aspect ratio will change as the window dimensions\r\n            // change as well. This is to ensure an best as possible viewing\r\n            // experience for the user.\r\n            const initialWidth = navbarIndicatorRef.current.clientWidth;\r\n            const initialHeight = navbarIndicatorRef.current.clientHeight;\r\n\r\n            // From this point on the THREE API will be used to render a canvas\r\n            // with 3 dimensional object in it.\r\n            //\r\n            // To start with that a scene is needed. Mentioned scene will be\r\n            // created here. Notice that the constructor does not need any\r\n            // arguments to instantiate.\r\n            const scene = new THREE.Scene();\r\n\r\n            // Now a renderer is created it will be responsible for rendering\r\n            // the scene properly onto the canvas.\r\n            //\r\n            // Note: The THREE.WebGLRenderer constructor accepts an object with\r\n            // two properties on it, at least in this case of usage.\r\n            const renderer = new THREE.WebGLRenderer({\r\n                // The 'alpha' property is used to get an transparent\r\n                // background. The alpha color is set to white.\r\n                alpha: true,\r\n\r\n                // The 'antialias' property cleans up about 50 to 70 percent of\r\n                // the pixelation of the scene. It really makes the scene look\r\n                // acceptable in the first place.\r\n                antialias: true,\r\n            });\r\n\r\n            // This is the first use case of the initial dimensions of the DOM\r\n            // reference - The size of the renderers DOM element is set here.\r\n            renderer.setSize(initialWidth, initialHeight);\r\n\r\n            // Sets the resolution of the image. This is not absolutely\r\n            // necessary but still improves the in it resulting product.\r\n            renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n            // Finally the renderer's DOM element is appended to the\r\n            // navbarIndicator DOM element reference. In other words there\r\n            // exists now a canvas in the tree of the navbarIndicator.\r\n            navbarIndicatorRef.current.appendChild(renderer.domElement);\r\n\r\n            // A camera is created for proper three dimensional displaying. The\r\n            // most interesting of its properties is probably the aspect. It is\r\n            // calculated by dividing the width of the navbarIndicator by its\r\n            // height.\r\n            const fov = 90;\r\n            const aspect = initialWidth / initialHeight;\r\n            const near = 0.1;\r\n            const far = 1000;\r\n\r\n            // Every constant is used to instantiate a 'PerspectiveCamera' of\r\n            // the THREE API.\r\n            const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n\r\n            // The camera is positioned a bit farther back in the scene. If that\r\n            // would not be done it would at point (0, 0, 0) and therefore\r\n            // directly inside the cube we are about to create.\r\n            camera.position.z = 5;\r\n\r\n            // A 'Pointlight' is created to make the 'MeshToonMaterial' visible,\r\n            // which will be used to construct the cube. It will shine a white\r\n            // light from a specific angle, such that the cubes starts shining a\r\n            // bit.\r\n            const light = new THREE.PointLight(0xffffff, 1, 200);\r\n            light.position.set(10, 10, 10);\r\n            scene.add(light);\r\n\r\n            // Notice that this is not the canvas that will be used to draw the\r\n            // scene on it is used to draw the texture of the cube on! This is\r\n            // done by converting a jsx element to a svg to a image that is then\r\n            // drawn onto that canvas.\r\n            const canvas = document.createElement(\"canvas\");\r\n\r\n            // This will initiate the process of drawing the jsx element to a\r\n            // canvas...\r\n            await renderToCanvas(canvas, () => <Logo size={180} />);\r\n\r\n            // Once that is done it is converted to a 'CanvasTexture' which is a\r\n            // class of the THREE API.\r\n            const texture = new THREE.CanvasTexture(canvas);\r\n\r\n            // Now a mesh is created. A mesh is composed out of a geometry like\r\n            // a sphere or in this case a box and of a material like 'Phong' or\r\n            // 'Basic'.\r\n            const geometry = new THREE.BoxGeometry(3, 3, 3);\r\n            const material = new THREE.MeshToonMaterial({\r\n                // The texture is used as the skin of the material. It is\r\n                // wrapped around it using the UVMapping of the\r\n                // 'CanvasStructure'.\r\n                map: texture,\r\n            });\r\n            const cube = new THREE.Mesh(geometry, material);\r\n            scene.add(cube);\r\n\r\n            // Now the main animation loop is created. It will handle the\r\n            // rotation animation of the cube.\r\n            const mainLoop = () => {\r\n                // A animation frame is requested to validate the animation onto\r\n                // the canvas.\r\n                //\r\n                // Note: Without this the animation would not even start\r\n                // working.\r\n                requestAnimationFrame(mainLoop);\r\n\r\n                // This is the part where the cube is rotated. Notice that the\r\n                // rotation value is in radiants and not in degrees, which is\r\n                // also the reason pi is divided by a specific number.\r\n                //\r\n                // This is also where the redux state management comes into\r\n                // play. It holds the value for 'isLoading' and should this\r\n                // value be 'true' the cube will rotate faster the if it were\r\n                // 'false'.\r\n                if (props.isLoading) {\r\n                    cube.rotation.x += Math.PI / 100;\r\n                    cube.rotation.y += Math.PI / 100;\r\n                } else {\r\n                    cube.rotation.x += Math.PI / 380;\r\n                    cube.rotation.y += Math.PI / 380;\r\n                }\r\n\r\n                // And the renderer combines the scene and the camera to a final\r\n                // image that will be the cube with it's texture, rotating.\r\n                renderer.render(scene, camera);\r\n            };\r\n\r\n            // And thus shall the animation begin. Notice that it will only be\r\n            // called once per lifecycle turn.\r\n            mainLoop();\r\n\r\n            // A cleanup function is added to accord for removing the canvas\r\n            // from screen on a new life cycle as there will be a new one\r\n            // created (as it should be).\r\n            clean.add(() => {\r\n                renderer.domElement.remove();\r\n            });\r\n\r\n            // Now the renderer and the camera are returned to pose as\r\n            // animationControls. This will become useful when changing the\r\n            // dimensions of the canvas on an event of 'resize'.\r\n            return { renderer, camera };\r\n        }\r\n    }, [props.isLoading, clean]);\r\n\r\n    // This is the function that will create a function that will handle the\r\n    // window's 'resize' event.\r\n    //\r\n    // It needs the animation controls of the handleLogoAnimation function to\r\n    // work.\r\n    const fabricateHandleWindowResize = useCallback(\r\n        (animationControls: {\r\n            renderer: THREE.WebGLRenderer;\r\n            camera: THREE.PerspectiveCamera;\r\n        }) => () => {\r\n            if (navbarIndicatorRef.current) {\r\n                const currentWidth = navbarIndicatorRef.current.clientWidth;\r\n                const currentHeight = navbarIndicatorRef.current.clientHeight;\r\n\r\n                animationControls.renderer.setSize(currentWidth, currentHeight);\r\n                animationControls.camera.aspect = currentWidth / currentHeight;\r\n\r\n                animationControls.camera.updateProjectionMatrix();\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    useEffect(() => {\r\n        // The handleLogoAnimation is called on the componentDidMount lifecycle\r\n        // part.\r\n        handleLogoAnimation().then((animationControls) => {\r\n            // Again because of typescript reasons a if conditional is added to\r\n            // prevent compilation problems.\r\n            if (animationControls) {\r\n                // A handleWindowResize() function is created to handle the\r\n                // canvas resizing.\r\n                const handleWindowResize = fabricateHandleWindowResize(\r\n                    animationControls\r\n                );\r\n\r\n                // The handler is added as a window 'resize' listener and needs\r\n                // to be removed on an event of component unmount.\r\n                window.addEventListener(\"resize\", handleWindowResize);\r\n\r\n                // A cleanup function to accord to the removal of the listener.\r\n                // This is absolutely necessary to keep a good performance of\r\n                // the website.\r\n                clean.add(() =>\r\n                    window.removeEventListener(\"resize\", handleWindowResize)\r\n                );\r\n            }\r\n        });\r\n\r\n        // A cleanup is performed on the 'unmount' event of the component.\r\n        return clean.exec;\r\n    }, [handleLogoAnimation, clean, fabricateHandleWindowResize]);\r\n\r\n    // The element structure of the component is returned and simply consists of\r\n    // a HTMLDivElement that will contain the THREE scene later on its\r\n    // lifecycle.\r\n    return (\r\n        <div\r\n            ref={navbarIndicatorRef}\r\n            className={scss[\"navbar-indicator\"]}\r\n        ></div>\r\n    );\r\n};\r\n\r\n// This is to connect the react component to the redux store\r\n//\r\n// Note: It is also possible to do this in a single step like this:\r\n// connect(...)(NavbarIndicator) but since the connector variable is needed for\r\n// typing purposes it is done in a double step.\r\nconst connector = connect((state: RootState) => ({\r\n    isLoading: state.navbarIndicator.isLoading,\r\n}));\r\n\r\nexport default connector(NavbarIndicator);\r\n","import React, { useMemo } from \"react\";\r\nimport NavbarIndicator from \"./navbar-indicator/NavbarIndicator\";\r\nimport LinkMask from \"../../essence/wrappers/link-mask/LinkMask\";\r\nimport HoverButton from \"../../essence/controls/hover-button/HoverButton\";\r\nimport useStyles from \"../../../@utils/useStyles\";\r\nimport scss from \"./Navbar.module.scss\";\r\n\r\nconst Navbar: React.FunctionComponent = () => {\r\n    const styles = useStyles({\r\n        navbarChildren: {\r\n            transform: \"translate3d(0, 100%, 0)\",\r\n        },\r\n        navbarIndicator: {\r\n            transform: \"translate3d(0, 0, 0)\",\r\n        },\r\n    });\r\n\r\n    const navbarChildConfigs = useMemo(\r\n        () => [\r\n            { text: \"docs\", title: \"\\u672C\" /* 本 */, to: \"/docs\" },\r\n            { text: \"setup\", title: \"\\u5099\" /* 備 */, to: \"/setup\" },\r\n            { text: \"contribute\", title: \"\\u8CC7\" /* 資 */, to: \"/contribute\" },\r\n        ],\r\n        []\r\n    );\r\n\r\n    const handleMouseEnter = () => {\r\n        styles.set({\r\n            navbarChildren: {\r\n                transform: \"translate3d(0, 0, 0)\" as any,\r\n            },\r\n            navbarIndicator: {\r\n                transform: \"translate3d(0, -100%, 0)\" as any,\r\n            },\r\n        });\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        styles.set({\r\n            navbarChildren: {\r\n                transform: \"translate3d(0, 100%, 0)\",\r\n            },\r\n            navbarIndicator: {\r\n                transform: \"translate3d(0, 0, 0)\",\r\n            },\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={scss[\"navbar\"]}\r\n            onMouseEnter={handleMouseEnter}\r\n            onMouseLeave={handleMouseLeave}\r\n        >\r\n            <div\r\n                className={scss[\"navbar__indicator\"]}\r\n                style={styles.get().navbarIndicator}\r\n            >\r\n                <NavbarIndicator></NavbarIndicator>\r\n            </div>\r\n            <div\r\n                className={scss[\"navbar__children\"]}\r\n                style={styles.get().navbarChildren}\r\n            >\r\n                {navbarChildConfigs.map((config, index) => (\r\n                    <div key={index} className={scss[\"navbar__child\"]}>\r\n                        <div className={scss[\"navbar_child_viewport\"]}>\r\n                            <LinkMask {...config}>\r\n                                <HoverButton\r\n                                    {...config}\r\n                                    appearance={{\r\n                                        crosshaired: true,\r\n                                        letterspacing: true,\r\n                                    }}\r\n                                ></HoverButton>\r\n                            </LinkMask>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className={scss[\"navbar__border\"]} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { RootState } from \"../../../@intrinsic/store\";\r\nimport useStyles from \"../../../@utils/useStyles\";\r\nimport playerSlice, { InitialState } from \"./Player.slice\";\r\nimport scss from \"./Player.module.scss\";\r\n\r\ntype Props = ConnectedProps<typeof connector>;\r\n\r\ntype CurrentInstance = InitialState[\"instances\"][keyof InitialState[\"instances\"]] & {\r\n    ID: string | number;\r\n};\r\n\r\nconst Player: React.FunctionComponent<Props> = (props) => {\r\n    const reactPlayerRef = useRef<any>(null);\r\n\r\n    const [currentInstance, setCurrentInstance] = useState<CurrentInstance>();\r\n    const [isPlaying, setIsPlaying] = useState(true);\r\n\r\n    const styles = useStyles({\r\n        player: {\r\n            display: \"none\",\r\n            transform: \"translate3d(0, -100%, 0)\",\r\n        },\r\n    });\r\n\r\n    const handleClick = () => {\r\n        styles.set([\r\n            {\r\n                __id: \"1:0\",\r\n                __tOffset: 0,\r\n                player: {\r\n                    transform: \"translate3d(0, -100%, 0)\" as any,\r\n                },\r\n            },\r\n            {\r\n                __id: \"1:1\",\r\n                __tOffset: 500,\r\n                __middleware: () => {\r\n                    if (currentInstance) {\r\n                        props.dispatch.toggleInstance(currentInstance.ID);\r\n                        props.dispatch.setInstanceProgress(\r\n                            currentInstance.ID,\r\n                            reactPlayerRef.current.getCurrentTime()\r\n                        );\r\n                        setIsPlaying(false);\r\n                    }\r\n                },\r\n                player: {\r\n                    display: \"none\",\r\n                },\r\n            },\r\n        ]);\r\n    };\r\n\r\n    const getCurrentInstance = useCallback(() => {\r\n        for (const ID in props.state.instances) {\r\n            const instance: CurrentInstance = {\r\n                ...props.state.instances[ID],\r\n                ID,\r\n            };\r\n\r\n            if (!instance.DATA.closed) {\r\n                return instance;\r\n            }\r\n        }\r\n    }, [props.state.instances]);\r\n\r\n    useEffect(() => {\r\n        const instance = getCurrentInstance();\r\n\r\n        if (instance) {\r\n            setCurrentInstance(instance);\r\n        }\r\n    }, [getCurrentInstance]);\r\n\r\n    useEffect(() => {\r\n        if (currentInstance) {\r\n            styles.set([\r\n                {\r\n                    __id: \"0:0\",\r\n                    __tOffset: 0,\r\n                    __middleware: () => {\r\n                        if (reactPlayerRef.current) {\r\n                            reactPlayerRef.current.seekTo(\r\n                                currentInstance.DATA.currentTime\r\n                            );\r\n                            setIsPlaying(true);\r\n                        }\r\n                    },\r\n                    player: {\r\n                        display: \"grid\" as any,\r\n                    },\r\n                },\r\n                {\r\n                    __id: \"0:1\",\r\n                    __tOffset: 100,\r\n                    player: {\r\n                        transform: \"translate3d(0, 0, 0)\" as any,\r\n                    },\r\n                },\r\n            ]);\r\n        }\r\n    }, [currentInstance]);\r\n\r\n    return (\r\n        <div\r\n            className={scss[\"player\"]}\r\n            style={styles.get().player}\r\n            onClick={handleClick}\r\n        >\r\n            <div className={scss[\"player__background\"]} />\r\n            <div className={scss[\"player__foreground\"]}>\r\n                <ReactPlayer\r\n                    ref={(player) => (reactPlayerRef.current = player)}\r\n                    className={scss[\"player__video\"]}\r\n                    playing={isPlaying}\r\n                    muted={true}\r\n                    url={currentInstance?.URI ?? \"\"}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst connector = connect(\r\n    (state: RootState) => ({\r\n        state: {\r\n            instances: state.player.instances,\r\n        },\r\n    }),\r\n    (dispatch) => ({\r\n        dispatch: {\r\n            toggleInstance: (ID: string | number) => {\r\n                dispatch(playerSlice.actions.toggleInstance(ID));\r\n            },\r\n            setInstanceProgress: (ID: string | number, progress: any) => {\r\n                dispatch(\r\n                    playerSlice.actions.setInstanceProgress({ ID, progress })\r\n                );\r\n            },\r\n        },\r\n    })\r\n);\r\n\r\nexport default connector(Player);\r\n","import React, { Suspense, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport Message from \"../../essence/displays/message/Message\";\nimport Navbar from \"../navbar/Navbar\";\nimport Player from \"../player/Player\";\nimport skeletonSlice from \"./Skeleton.slice\";\nimport scss from \"./Skeleton.module.scss\";\n\nconst Home = React.lazy(() => import(\"../../pages/home/Home\"));\nconst Docs = React.lazy(() => import(\"../../pages/docs/Docs\"));\nconst Setup = React.lazy(() => import(\"../../pages/setup/Setup\"));\nconst Contribute = React.lazy(\n    () => import(\"../../pages/contribute/Contribute\")\n);\nconst Meta = React.lazy(() => import(\"../../pages/meta/Meta\"));\n\ntype Props = ConnectedProps<typeof connector>;\n\nconst Skeleton: React.FunctionComponent<Props> = (props) => {\n    useEffect(() => {\n        fetch(\"https://hanji-www.herokuapp.com/commands\")\n            .then((res) => res.json())\n            .then((res) => {\n                props.updateCommands(res);\n            });\n    }, [props]);\n\n    return (\n        <Router>\n            <div className={scss[\"skeleton\"]}>\n                <div className={scss[\"skeleton__header\"]}>\n                    <Navbar />\n                </div>\n                <div className={scss[\"skeleton__content\"]}>\n                    <Suspense fallback={<Message />}>\n                        <Switch>\n                            <Route exact path=\"/\" component={Home} />\n                            <Route exact path=\"/docs\" component={Docs} />\n                            <Route\n                                exact\n                                path=\"/contribute\"\n                                component={Contribute}\n                            />\n                            <Route exact path=\"/setup\" component={Setup} />\n                            <Route exact path=\"/meta\" component={Meta} />\n                            <Route\n                                component={() => (\n                                    <Message\n                                        content={{\n                                            text: \"Not Found\",\n                                            title: \"無い\",\n                                            to: \"/\",\n                                        }}\n                                    />\n                                )}\n                            />\n                        </Switch>\n                    </Suspense>\n                </div>\n                <Player />\n            </div>\n        </Router>\n    );\n};\n\nconst connector = connect(null, (dispatch) => ({\n    updateCommands: (commands: any) => {\n        dispatch(skeletonSlice.actions.updateCommands(commands));\n    },\n}));\n\nexport default connector(Skeleton);\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { store } from \"./@intrinsic/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Skeleton from \"./components/scaffolding/skeleton/Skeleton\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <Skeleton />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2yto0\",\"navbar__indicator\":\"Navbar_navbar__indicator__qSNcT\",\"navbar__border\":\"Navbar_navbar__border__2ZNsO\",\"navbar__children\":\"Navbar_navbar__children__KWx4y\",\"navbar__child\":\"Navbar_navbar__child__akqnK\",\"navbar_child_viewport\":\"Navbar_navbar_child_viewport__3lkxo\"};","/**\r\n * @author lukasdiegelmann\r\n */\r\n\r\nimport CSS from \"csstype\";\r\nimport { useRef, useState } from \"react\";\r\n\r\ntype RecursivePartial<T> = {\r\n    [P in keyof T]?: RecursivePartial<T[P]>;\r\n};\r\ntype MapComponentToStyles = { [k: string]: CSS.Properties };\r\ntype SetInput<T> =\r\n    | RecursivePartial<T>\r\n    | (RecursivePartial<T> & {\r\n          __id: string /* => `${number}:${number}` */;\r\n          __tOffset: number;\r\n          __middleware?: () => void;\r\n      })\r\n    | (RecursivePartial<T> & {\r\n          __id: string /* => `${number}:${number}` */;\r\n          __tOffset: number;\r\n          __middleware?: () => void;\r\n      })[];\r\n\r\nconst deepMerge = (...sources: any) => {\r\n    let acc = {};\r\n    for (const source of sources) {\r\n        if (source instanceof Array) {\r\n            if (!(acc instanceof Array)) {\r\n                acc = [];\r\n            }\r\n            acc = [...(acc as any), ...source];\r\n        } else if (source instanceof Object) {\r\n            for (let [key, value] of Object.entries(source)) {\r\n                if (value instanceof Object && key in acc) {\r\n                    value = deepMerge((acc as any)[key], value);\r\n                }\r\n                acc = { ...acc, [key]: value };\r\n            }\r\n        }\r\n    }\r\n    return acc;\r\n};\r\n\r\nconst useStyles = <T extends MapComponentToStyles>(mapComponentToStyles: T) => {\r\n    const stateRef = useRef(mapComponentToStyles);\r\n    const [state, setState] = useState(stateRef.current);\r\n    const timeouts = useRef<{ [id: string]: NodeJS.Timeout }>({});\r\n\r\n    const validateNewTimeline = (id: string, isSafe: boolean | undefined) => {\r\n        const checkIfTimelineExists = (id: string) => {\r\n            for (let timeoutID in timeouts.current) {\r\n                const timelineID = timeoutID.split(\":\")[0];\r\n\r\n                if (id.match(new RegExp(`^${timelineID}:\\\\d+$`))) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        return (isSafe && !checkIfTimelineExists(id)) || !isSafe;\r\n    };\r\n\r\n    const set = (\r\n        input: SetInput<T>,\r\n        options?: Partial<{ isSafe: boolean }>\r\n    ) => {\r\n        if (input instanceof Array) {\r\n            if (validateNewTimeline(input[0].__id, options?.isSafe)) {\r\n                for (let i = { i: 0, k: 0 }; i.i < input.length; i.i++) {\r\n                    const { __tOffset, __id, __middleware, ...slice } = input[\r\n                        i.i\r\n                    ];\r\n                    i.k += __tOffset;\r\n\r\n                    timeouts.current[__id] = setTimeout(() => {\r\n                        if (typeof __middleware === \"function\") {\r\n                            __middleware();\r\n                        }\r\n\r\n                        const result = deepMerge(\r\n                            stateRef.current,\r\n                            slice\r\n                        ) as any;\r\n                        stateRef.current = result;\r\n                        setState(result);\r\n                        delete timeouts.current[__id as string];\r\n                    }, i.k);\r\n                }\r\n            }\r\n        } else if (input.__tOffset) {\r\n            if (validateNewTimeline(input.__id as string, options?.isSafe)) {\r\n                const { __tOffset, __id, __middleware, ...slice } = input;\r\n\r\n                timeouts.current[__id as string] = setTimeout(() => {\r\n                    if (typeof __middleware === \"function\") {\r\n                        __middleware();\r\n                    }\r\n\r\n                    const result = deepMerge(stateRef.current, slice) as any;\r\n                    stateRef.current = result;\r\n                    setState(result);\r\n                    delete timeouts.current[__id as string];\r\n                }, __tOffset as number);\r\n            }\r\n        } else {\r\n            const result = deepMerge(stateRef.current, input) as any;\r\n            stateRef.current = result;\r\n            setState(result);\r\n        }\r\n    };\r\n\r\n    const get = () => state;\r\n\r\n    const clear = (at?: string) => {\r\n        for (let id in timeouts.current) {\r\n            if (at) {\r\n                if (at.match(/^\\d+:\\d+$/)) {\r\n                    if (at === id) {\r\n                        clearTimeout(timeouts.current[id]);\r\n                        break;\r\n                    }\r\n                }\r\n                if (at.match(/^\\d+$/)) {\r\n                    if (at === id.split(\":\")[0]) {\r\n                        clearTimeout(timeouts.current[id]);\r\n                        continue;\r\n                    }\r\n                }\r\n            } else {\r\n                clearTimeout(timeouts.current[id]);\r\n                continue;\r\n            }\r\n        }\r\n    };\r\n\r\n    return { get, set, clear };\r\n};\r\n\r\nexport default useStyles;\r\n","import {\r\n    createSlice,\r\n    PayloadAction,\r\n    SliceCaseReducers,\r\n    CaseReducer,\r\n} from \"@reduxjs/toolkit\";\r\n\r\nexport type InitialState = {\r\n    instances: {\r\n        [ID: string]: {\r\n            URI: null | string;\r\n            DATA: {\r\n                closed: boolean;\r\n                currentTime: number;\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\ntype CaseReducers = {\r\n    createInstance: CaseReducer<\r\n        InitialState,\r\n        PayloadAction<keyof InitialState[\"instances\"]>\r\n    >;\r\n    toggleInstance: CaseReducer<\r\n        InitialState,\r\n        PayloadAction<keyof InitialState[\"instances\"]>\r\n    >;\r\n    setInstanceURI: CaseReducer<\r\n        InitialState,\r\n        PayloadAction<{ ID: keyof InitialState[\"instances\"]; URI: string }>\r\n    >;\r\n    setInstanceProgress: CaseReducer<\r\n        InitialState,\r\n        PayloadAction<{\r\n            ID: keyof InitialState[\"instances\"];\r\n            progress: InitialState[\"instances\"][keyof InitialState[\"instances\"]][\"DATA\"][\"currentTime\"];\r\n        }>\r\n    >;\r\n} & SliceCaseReducers<InitialState>;\r\n\r\nconst playerSlice = createSlice<InitialState, CaseReducers>({\r\n    name: \"player\",\r\n    initialState: {\r\n        instances: {},\r\n    },\r\n    reducers: {\r\n        createInstance: (state, { payload }) => {\r\n            if (!state.instances[payload]) {\r\n                state.instances[payload] = {\r\n                    DATA: {\r\n                        closed: true,\r\n                        currentTime: 0,\r\n                    },\r\n                    URI: null,\r\n                };\r\n            }\r\n        },\r\n        toggleInstance: (state, { payload }) => {\r\n            state.instances[payload].DATA.closed = !state.instances[payload]\r\n                .DATA.closed;\r\n        },\r\n        setInstanceURI: (state, { payload }) => {\r\n            if (state.instances[payload.ID]) {\r\n                state.instances[payload.ID].URI = payload.URI;\r\n            }\r\n        },\r\n        setInstanceProgress: (state, { payload }) => {\r\n            if (state.instances[payload.ID]) {\r\n                state.instances[payload.ID].DATA.currentTime = payload.progress;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport default playerSlice;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"player\":\"Player_player__3RFG6\",\"player__background\":\"Player_player__background__4KxC-\",\"player__foreground\":\"Player_player__foreground__1MyCb\",\"player__video\":\"Player_player__video__alxSq\"};","/**\r\n * @author lukasdiegelmann\r\n */\r\n\r\nimport { useRef } from \"react\";\r\n\r\n// This react hook is used to handle the final cleanup on a react component with\r\n// a little more elegance. Once invoked, it returns an object with two\r\n// properties ('add', 'exec'), these are to handle the hook.\r\nconst useClean = () => {\r\n    // This will hold all cleanup functions in an array, which will be loop\r\n    // through on the exec() handle.\r\n    const dumpster = useRef<Function[]>([]);\r\n\r\n    return {\r\n        // Adds a new cleanup function to the dumpster array. Note that this\r\n        // function can do anything and will not be hindered on any asynchronous\r\n        // tasks or alike.\r\n        add: (cleanup: Function) =>\r\n            (dumpster.current = [...dumpster.current, cleanup]),\r\n\r\n        // The exec() handle will invoke all cleanup functions one after another\r\n        // until the array has been completely looped through. Once that's\r\n        // happened the dumpster array will be set to an empty one.\r\n        exec: () => {\r\n            dumpster.current.forEach((cleanup) => cleanup());\r\n            dumpster.current = [];\r\n        },\r\n    };\r\n};\r\n\r\nexport default useClean;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__15-Ig\",\"message__particles\":\"Message_message__particles__2ZzW7\",\"message__content\":\"Message_message__content__1GBkr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"skeleton\":\"Skeleton_skeleton__kYm6s\",\"skeleton__header\":\"Skeleton_skeleton__header__1iejb\",\"skeleton__content\":\"Skeleton_skeleton__content__3Vljv\"};","import React, { ReactNode } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport scss from \"./LinkMask.module.scss\";\r\n\r\ntype Props = {\r\n    to: string;\r\n    children: ReactNode;\r\n};\r\n\r\nconst LinkMask: React.FunctionComponent<Props> = (props) => {\r\n    return (\r\n        <Link to={props.to} className={scss[\"link-mask\"]}>\r\n            {props.children}\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default LinkMask;\r\n","/**\r\n * @author lukasdiegelmann\r\n */\r\n\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport useClean from \"./useClean\";\r\n\r\ntype Configuration = {\r\n    ref: React.RefObject<HTMLDivElement | null>;\r\n    orientation: { width: number; height: number };\r\n    options?: Partial<{\r\n        scalar: number;\r\n        lessThanOrEqualTo: boolean;\r\n        debug: any;\r\n    }>;\r\n    handle: (\r\n        result: number,\r\n        debug?: {\r\n            id: any;\r\n            current: { width: number; height: number };\r\n            orientation: { width: number; height: number };\r\n            options: { scalar: number; lessThanOrEqualTo: boolean };\r\n            result: number;\r\n        }\r\n    ) => void;\r\n};\r\n\r\n// A react hook that allows one to adjust pixel sizes relative to the window\r\n// size. The hook accepts an array of configs, which again contain a function\r\n// (called a handle) and an options object (though almost every option is\r\n// required).\r\nconst useRelativeToComponent = (configs: Configuration[]) => {\r\n    const clean = useClean();\r\n    const [hasBeenExecuted, setHasBeenExecuted] = useState(false);\r\n\r\n    const polishOptions = useCallback((options: Configuration[\"options\"]) => {\r\n        return {\r\n            scalar: options?.scalar ?? 1,\r\n            lessThanOrEqualTo: options?.lessThanOrEqualTo ?? false,\r\n        };\r\n    }, []);\r\n\r\n    const handleComputing = useCallback(() => {\r\n        configs.forEach((config) => {\r\n            const options = polishOptions(config.options);\r\n\r\n            if (config.ref.current) {\r\n                const width =\r\n                    config.ref.current.clientWidth / config.orientation.width;\r\n                const height =\r\n                    config.ref.current.clientHeight / config.orientation.height;\r\n\r\n                const getGreaterThanOrEqualTo = () =>\r\n                    width >= height ? width : height;\r\n                const getLessThanOrEqualTo = () =>\r\n                    width <= height ? width : height;\r\n\r\n                const result =\r\n                    (!options.lessThanOrEqualTo\r\n                        ? getGreaterThanOrEqualTo()\r\n                        : getLessThanOrEqualTo()) * options.scalar;\r\n\r\n                if (result) {\r\n                    config.handle(result, {\r\n                        id: config.options?.debug,\r\n                        current: { width, height },\r\n                        orientation: { ...config.orientation },\r\n                        options,\r\n                        result,\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }, [polishOptions, configs]);\r\n\r\n    useEffect(() => {\r\n        if (!hasBeenExecuted) {\r\n            handleComputing();\r\n            setHasBeenExecuted(true);\r\n        }\r\n        const handleWindowResize = () => handleComputing();\r\n\r\n        window.addEventListener(\"resize\", handleWindowResize);\r\n\r\n        clean.add(() => {\r\n            window.removeEventListener(\"resize\", handleWindowResize);\r\n        });\r\n\r\n        return clean.exec;\r\n    }, [clean, handleComputing, hasBeenExecuted]);\r\n};\r\n\r\nexport default useRelativeToComponent;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar-indicator\":\"NavbarIndicator_navbar-indicator__1vg7V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link-mask\":\"LinkMask_link-mask__1VXaU\"};"],"sourceRoot":""}